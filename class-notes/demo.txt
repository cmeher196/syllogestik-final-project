
CSS - 3
    - inline : same styling we have to copy multiple places
    - internal :
        </body>
        <style>
        .paragraph{
            border: "2px solid red"
        }
        </style>
        
    - external : 
    style.css:
        .paragraph{
            border: "2px solid red"
        }


Day 2:
    - Javascript  : Programming lang(scripting lang)
                  : dynamic prg lang
                  : interpreted lang (compiler /interpreter)
                        - interpreter : line by line:
                            - capture your compile time error easy
                            - u can run you part of code easily
                  : Not fully based on oops
                  : Used to make our UI dynamic
                  : web based prg lang
                  : it helps to add events to our static html pages
                  : we can interact with html contents and style components 

                  - scripting lang  
                    - unsigned int x = 12
                    - int /byte x = 12
                    - long x = 12l
                    - float x = 12.0f
                    - var x = 12 // integer
                    - var x = "12" //string
                    - var x = [1,2,3,4] //array type 
        - variables
            : container
            : storage container
            : used to assign dynamic values
            : can be changed / assigned during runtime
            function sum(10,20){
                console.log("print value of x+y:"+x+y)
            }
            : local / global variables
            : keywords:
                - var: use for global scope, 
                - let: block scope, 
                - const : final variable

        - data types
            - primitive datatype
                : string('' / ""), number(int/long/float/double), boolean(true/false), 
                : null, undefine
                : var x = null;
                
            - non-primitive datatype
                : Object = represents instance to access member
                    - Employee class    
                        : int x, y 
                        : method : sum, division
                    
                    - Student class:
                        Object : new Employee()

                {
                    key: value
                }
                : Array = similar group of variable ["1","2"]
                : RegExp = represents group of expression 
                    : form 
                        : email([__@________])
                        : paragraphs : not found : invalid
                


        - Operators
            : Arithmetic Operators :  +, -, *, / , %(modulus), ++, -- (x,y)
            : Relational Operators :  >,<,=>,<=, ==, ===(identical), !=, !==(not identical)
                == : 10 == "10" : true
                === : 10(number) === "10"(string) : false
            : Bitwise Operators : &, |, ^, ~, << , >>, >>>(10 >>> 3) = 3
            : Logical Operators : &&, ||, !
            : assignment/shorthand operator : +=, /= 
                x = 10;
                x += 12 => x = x(10) + 12
                log(x) //o/p
            : Special Operators : type of x, (?  : )

        - if statement/switch case
            - conditional statements
                - if
                - if /if-else/else
                - if - else
            
            - switch case   

                switch(grade) {
                    case "A":
                    log("dont study this level")
                    break;

                    default:
                    log("lets bunk classes if we arent A grade")
                    break;
                }//"A"
        - loops
         : for loop(intialvalue; check conditional value; increament)
         : for each()
         : while()
         : do-while()

        - function
         : block of code/scope
            {

                : variable(number/string/object/array)

            }
            function xmap(ymap){ //1


            }

            function ymap(x){

                log("print value of x"+x)
            }

            xmap(ymap("Chandra))

        - Objects
         : let student ={
            "college" :"SIT",
            "rollno" : "SIT_ECE_123"

         }

        let student = new Object()
        // h/w : learn how to create object using constructor 
        //acces object : student.college 

        - Array : ex of foreach
            - var name = ['Raj','Ayushi'];
            - var rollnum = new Array()
            - // h/w how to create array using constructor 
            - inbuilt function:
                : 
        - Events
        - Event Listners


console.log("print hello")


const x = 12

function xmap(){
    x = 14;
    console.log("xmap to"+x)
}


//react
- it is js library UI
- developed by FB : 2015 
- components based library : everything in react is a components
- these components resembles with tag <App />
- two type of components in react : class / functional
- react 16.8.0 : introduced functional components
- lifecycle : doc got rendered, when the component got mount,will mount
- class component : lifecycle methods : componentWillMount(), componentDidMount(preState, currState), render()
- functional components : hooks
- hooks -> function : useState(): state management, useEffect(): lifecycle
        -> useMemo, useContext, useRedux


//Add js code to handle input and form submit event in your login and signup page.
//create a react app : counter app


//Agenda :
    - NO choice
    - Start Mobile Dev
    - ES6 and its functionalites
    - Package.json
    - package-lock.json
    - spread Operators
    - useEffects
    - module exports
    - module import
    - props
    ----------------------------------------------------------------
    - MObile Dev

---------------------------------------
Reacts : state management 
       : props
       : useEffects

ES6:
    - 2015 : 
    - defines rule and guideline for which complaint to js
    - variables:
        - let and const
    - Arrow function:
        - const sum = (a ,b) => a + b;
        - const isLoading = data => return false;
        - const App = () => return <h1>Hello team</h1>
    - Template Literals
        - "Hello how are you "+name1+ "How are you "+ name2+ ""
        - `Hello How are you ${name1} , How are you ${name}`
    - Class    
        - class Reactangle{
            constructor(w, h){
                this.w = w;
                this.h = h;
            }
            perimeter(){

            }
        }
    
    - Promises, (callback hell) 
    - async await
    - Module export and import
        - export default function App()
        - import App, {}
    
    - spread operator:
        - ...
        - array and Objects, string
        - let str = "hello";
            log(...str);

    


Day5:
    - npm
    - basic uses of package.json and package-lock.json
    - walk through the code (react native project)
    - handle or learn few new components
    - 9:28 am


NPM :
    - node package manager ?
    - npm stands for  node package manager.
    - Basically it is a default package manager for node.js and it allows us to install,
    - share, and manage libraries and packages for our projects.
    - 

Day6:
   - expo cli and react native cli 
   - components - > ActivityIndicator
                - > View
                - > Text
                - > Button
                - > TextInput

   - Assignments(single)
        - > Welcome page from Getting started + pending h/w : display 3rd section on clicking back
        - > Login and Sign Up page  (username, password, email)

        -> Sequence
            -> App lands on Getting Started page
            -> onClick on Getting Started button , user will goto signup page
            -> in Sign up user need to enter some details -> on signing up it should goto login page
            -> in Login page user should login with valid username-> on login it should land on welcome page.
            -> Welcome page there should be a button to log out which will take use to main Getting Started page

- Expo cli and react native cli
    - > cli ??
    - > command line interface (expo and react native)

    -> Expo cli :
        - developed after react native cli
        - workflow : managed the react native apps
                   : it removed all the complexity from a react native perpective 
                   : it take time to load the app
                   : no development
                   : to access expo based app you can use expo cmd using npx to create react native app
        - Features:
                   : So react Native cli doesnt give so many infra  features like camera, statusbar, etec
                   : which you expo provide : camera, notification, status bar, maps, and many more
        
        - Development :
                   : it allows us to run the application on local server
                   : it also allow us to run on virtual machine through local server
                   : Best way to develop POCs : sample apps
                   : it take cares to run app on difference screens like, simlutor, web abse, or through expo go App
                   : debugging is faster and visualization too

        - Deployment : 
                   : Using expo u can bundle up the package easily
                   : Then it helps to publish you app on local server or deployment server.

    -> React Native cli :
        - workflow : Bare workflow  -> it doesnt give you any thing, but large supportability  
        - customizations : in RN cli : u have to change code if needed .
        - Development : u need to have virtual machine 
                      : xcode/android studio (virtual machine)
                      : then you to setup cd to run on these VMs /simlutors 
                      : Full benefits of using native configurations: IOS / Android 
                      : Deployment : Xcode -> IOS / Andriod : to build package and run on server

--------------------------------------------------------xxxxxxxx--------------------------------------------------------

Welcome to Mobile Dev:
    -> every day assignments
    -> around the logic or component which we will learn
    -> we will be building towards default e-commerce App project(! I will build) 
    -> u can make a grp(10) : project idea : share with us : usecase (optional)


Day7
    - props in react
    - FlatList
    - Custom Component : Card component
    - ActivityIndicator
    - Image
    - ImageBackground
      


Props:
    - Setting up relationship between Parent and Child component
    - Used to send properties from Parent to child to perform some action 
    - It is object notation 
    - We can send props through Component itself by passing a prop name 
    - We cam also pass some trigger action as well
    - Sample from parent
        - <Product title={data.title} price={data.price} discount={data.discount}



FlatList:
    - Powerful component of React Native
    - it used to render the data Lists in the component or page
    - it has its own properties like renderData, data, numSection, etec


//in react js
    const data =[{
        'id' : "1234"
        'name' :"Chandra"

    },
    {
        'id' : "1236"
        'name' :"Shruti"

    },
    {
        'id' : "1235"
        'name' :"Shubham"

    }
    
    ]

    {
        data.map(item =>{

            <Card key={item.key} title={item.name} />
        })
    }

- ActivityIndicator:
    - this component is a loader component
    - default shape is circular


-> Sequence
            (update your existing assignment with new concept learnt today)
            -> App lands on Getting Started page
            (below setup using different components, like Signup Component, Login, Component, Product Component, Card Component, etc)
            (Use props whereever is required)
            -> onClick on Getting Started button , user will goto signup page
            -> in Sign up user need to enter some details -> on signing up it should goto login page
            -> in Login page user should login with valid username-> on login it should land on welcome page.
            -> Welcome page there should be two buttons
                -> goto product page with list of products in card component
                -> log out which will take use to main Getting Started page
            - PS(welcome and product page should have User name on the top of the page)

DAY8
    - show how FlatList used for scroll - done
    - Image - done
    - ImageBackground -done
    - ScrollView - done
    - SectionList - done
    - SafeAreaView - done
    - Switch - done

DAY9:
    - ActivityIndicator is optional
    - hooks(useState, useEffects, useContext, useRedux)    
    - Context and useContext(next session)
    - 

Assignment: 10 marks
    - create 2 buttons
        - one FlatList, ScrollView (array.map())
    - reuse card component to accomodate Images in card
    - passed it from main component and display
    - Also try to use all the new components learnt
        - show how FlatList used for scroll - done
        - Image
        - ImageBackground(sign up , login page, getting started page, welcome page)
        - ScrollView
        - SectionList - try out from products(like shoes, dress, etc)
        - SafeAreaView / View
        - Switch - changing background color


App :
    - products
        - title, description, discount,  price
        - wishlist -> wishlist screen
        - cart 
        - checkout page
        - payment gw

Day11:
    - Navigation
        : It helps to move/navigated from one screen to another
        : It gives features like styling components, adding icons, changing color 
        : Easy Navigation
        : It also provides normal animation
        : It provides different types of navigation
            - Stack/Drawer/Tabs


        - Stack Navigation
            - Its a type of Navigation
            - Where screens are piled up as stacks as in stack DS 
                - [FILO] -> [ProductScreens,LoginScreen,gettingstarted,welcomescreen]
                            [LoginScreen,gettingstarted,welcomescreen]
                            [gettingstarted,welcomescreen]

        - drawer

        - Tabs
            -Bottom Tabs
        
    - components
        - TouchableOpactity
        - Pressable
        - Modal
        - ActivityIndicator



Day11
    - tab Navigation - 5mins
    - merged Stack and Drawer navigators
--------------------------------------------------
    - callback, promise, async-await : (10-15mins) //js
        - JS synchronous process bcz it is interpreted based
        - for loop : 10000(flipkart) : 500ms : 0.5 secs
        - display ads banner 

        - asynchronous 
            - give me my stuff(method call, thread(excutable thread-> prg), etc) which blocks the execution of the main program
            - let me handle this bulk operation and let other lines of code get executed
            - setTimeout(()=>{},1000)
        
        - callback :
            function xyz(a, callback){
                console.log(a);

                callback("Chandra", callback){
                    callback(5,6,callback){
                        callback(1,2,3,callback){
                            callback(2,3,4){
                        }
                    }
                };
            }-> callback hell


            function abc(name, callback){
             console.log(name)
             callback(a,b);
            }

            function bcc(a,b, callback){
                console.log( a+b);
                callback(a,b,c);
            }

            function ccb(a,b,c){
                return a+b+c;
            }

        - Promises(resolved, rejected)
            - new Promise(resolved, rejected){
                if(x > 10){
                    resolved(console.log("resolved"))
                } else{
                    reject(console.log("rejected"))    
                }
            }

            doSum(a, b){
                new Promise(resolved, rejected){
                    if(a>0 && b>0){
                        return resolve(
                            new Promise(resolved, rejected){
                                if(a>0 && b>0){
                                return resolve(a+b+a+b)
                                }else {
                                    reject("again issue")
                                }
                            }
                        )
                    } else{
                        reject("error is a and b not a natural number")
                    }
                }
            }

            function sumCalc(a,b){ //-1,-2
                doSum(a,b).then(x => console.log(x))
                          .then(y=> console.log(y))
                          .catch(err=>console.log(err))

            }

            Promise.all()

            apiurl ="http://jsonplaceholder.com"
            fetch.get(apiurl)
                    .then(response => response.json())
                    .then(response => setResponse(response)) //200 201 401, 503
                    .catch(err=>setError(err)) //

                    error.lenth >0 <Modal ('error msg',err,[
                    title:'Close',onPress:{handleFetchData}
                    ])
                                     
                                    >
                    Modal()


            function fetch(method = "GET",callback(){

                new Promise( resolve, reject){
                    return apiurl 
                } else{
                    return "some error"
                }
            })

            then
            catch
            finally

            //ES6 : async / await

             async function calcSum(a, b){
                    return (new Promise(res, rej)=>)
                } 


            calcSum(); //async
            calDiv();
            calMul();

            const sumOfTwoNumer = await calSum(a,b); //return promise
            const mulOfTwoNums(sumOfTwoNumer.data) //a+b+c



    - react storage : 10 mins
    - axios/fetch : 10 mins
    - components(if anything pending) : 15mins
    - about you projects (10-15mins)
        - E- commerce : all assignments were aligned ac/dly
        - Optional : if any one taking up any new topic(student define)
        - july: 10 app cv : pure wrngly
        - e-commerce / optional project : 1(80) or grp(100) of 2 upt 5 students 100
        - from monday : project discussion session
                      : wednesday : review ()
                      : saturday : final review -> submit




Day12 :
    - Reducer : React.js
        - it was introduced when redux came to React
        - redux a store management -> [states-> complex type of state]
        - it is a pure function ??
                - const decrement = count => return --count

        - reducer is a pure function : global state management
            - it always produces same output (a,b) => return a+b
            - bcz it never changes the state/ it doesnt create any side effect.(react)
            - it takes two params (state, action) => it returns a state 
            - state: anything (string, number, array, anything) 
            - action:-> 2 types: type -> which kind of action u want to perform 
                               : payload -> this is the data tht component send to management in state storage
            - useEffect :

        



        - impure func:
            - let intialvalue = 0;
             const increment =() =>{
                return ++intialvalue;
             }

Today's Assignment : 10 marks
    - implement Reducer
    - implement global state management in the existing assignment(merge context api and reducer)



